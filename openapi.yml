openapi: 3.0.3
info:
  title: md-roam HTTP Server API
  description: |
    A comprehensive REST API server for org-roam and md-roam functionality built with Emacs Lisp.
    
    This API provides complete access to org-roam database operations, file management,
    node creation and manipulation, search capabilities, citation handling, tag management,
    and visual graph interface integration via org-roam-ui.
    
    Features:
    - Complete CRUD operations for nodes
    - Bidirectional link discovery
    - Advanced search and filtering
    - Citation and reference tracking
    - Tag and category management
    - Database statistics and health monitoring
    - YAML configuration file support
    - Visual graph interface integration (org-roam-ui)
    - Unified support for Markdown (.md) and Org-mode (.org) files
    - Docker containerization with volume mounting
    - Modular Emacs Lisp architecture
    
  version: 2.0.0
  contact:
    name: md-roam-server
    url: https://github.com/SuzumiyaAoba/md-roam-server

servers:
  - url: http://localhost:8080
    description: Default development server (configurable via ~/.config/md-roam-server/config.yml)

paths:
  # Health check and root endpoint
  /:
    get:
      summary: Health check and server info
      description: Get server status and available endpoints
      tags:
        - Health Check
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  # File Operations
  /files:
    get:
      summary: List all org-roam files
      description: Get a list of all org-roam nodes with metadata
      tags:
        - File Operations
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesResponse'

  /files/raw:
    get:
      summary: List physical files
      description: Get a raw list of physical files in org-roam directory
      tags:
        - File Operations
      responses:
        '200':
          description: Raw files list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawFilesResponse'

  /files/content/{filepath}:
    get:
      summary: Get file content by filepath
      description: Retrieve file content using relative filepath
      tags:
        - File Operations
      parameters:
        - name: filepath
          in: path
          required: true
          description: Relative path to the file from org-roam directory
          schema:
            type: string
      responses:
        '200':
          description: File content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Node Operations
  /nodes:
    get:
      summary: List all nodes
      description: Get all org-roam nodes with metadata, ordered by title
      tags:
        - Node Operations
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesResponse'
    post:
      summary: Create new node
      description: Create a new org-roam node with specified metadata and content
      tags:
        - Node Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'

  /nodes/{id}:
    get:
      summary: Get node by ID
      description: Retrieve a single org-roam node by its ID
      tags:
        - Node Operations
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: Node retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update node
      description: Update an existing org-roam node
      tags:
        - Node Operations
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodeRequest'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
    delete:
      summary: Delete node
      description: Delete an org-roam node and its file
      tags:
        - Node Operations
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: Node deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  /nodes/{id}/content:
    get:
      summary: Get node file content
      description: Get complete file content for a node by ID
      tags:
        - Node Operations
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: Content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeContentResponse'

  /nodes/{id}/parse:
    get:
      summary: Parse node file
      description: Parse node file and separate metadata from body content
      tags:
        - Node Operations
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: File parsed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseResponse'

  # Node Relationships
  /nodes/{id}/backlinks:
    get:
      summary: Get node backlinks
      description: Get all nodes that link to this node
      tags:
        - Node Relationships
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: Backlinks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacklinksResponse'

  /nodes/{id}/links:
    get:
      summary: Get node forward links
      description: Get all nodes this node links to
      tags:
        - Node Relationships
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: Forward links retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksResponse'

  /nodes/{id}/aliases:
    get:
      summary: Get node aliases
      description: Get all aliases for a specific node
      tags:
        - Node Relationships
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: Aliases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasesResponse'

  /nodes/{id}/refs:
    get:
      summary: Get node references
      description: Get all references for a specific node
      tags:
        - Node Relationships
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      responses:
        '200':
          description: References retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefsResponse'

  # Tag Management
  /nodes/{id}/tags:
    post:
      summary: Add tag to node
      description: Add a tag to a specific node
      tags:
        - Tag Management
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '200':
          description: Tag added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'

  /nodes/{id}/tags/{tag}:
    delete:
      summary: Remove tag from node
      description: Remove a specific tag from a node
      tags:
        - Tag Management
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
        - name: tag
          in: path
          required: true
          description: Tag to remove
          schema:
            type: string
      responses:
        '200':
          description: Tag removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'

  # Category Management
  /nodes/{id}/categories:
    post:
      summary: Add category to node
      description: Add a category to a specific node (not implemented - use PUT /nodes/:id instead)
      tags:
        - Category Management
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: Category added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /nodes/{id}/categories/{category}:
    delete:
      summary: Remove category from node
      description: Remove a specific category from a node (not implemented - use PUT /nodes/:id instead)
      tags:
        - Category Management
      parameters:
        - name: id
          in: path
          required: true
          description: Unique node ID
          schema:
            type: string
        - name: category
          in: path
          required: true
          description: Category to remove
          schema:
            type: string
      responses:
        '200':
          description: Category removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  # Search Operations
  /search/{query}:
    get:
      summary: Search nodes
      description: Search nodes by title or alias
      tags:
        - Search Operations
      parameters:
        - name: query
          in: path
          required: true
          description: Search query (URL-encoded)
          schema:
            type: string
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /tags/{tag}/nodes:
    get:
      summary: Get nodes by tag
      description: Get all nodes with a specific tag
      tags:
        - Search Operations
      parameters:
        - name: tag
          in: path
          required: true
          description: Tag name
          schema:
            type: string
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /aliases/{alias}/nodes:
    get:
      summary: Get nodes by alias
      description: Get all nodes with a specific alias
      tags:
        - Search Operations
      parameters:
        - name: alias
          in: path
          required: true
          description: Alias name
          schema:
            type: string
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /refs/{ref}/nodes:
    get:
      summary: Get nodes by reference
      description: Get all nodes with a specific reference
      tags:
        - Search Operations
      parameters:
        - name: ref
          in: path
          required: true
          description: Reference URL (URL-encoded)
          schema:
            type: string
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  /citations/{citation}/nodes:
    get:
      summary: Get nodes by citation
      description: Get all nodes with a specific citation
      tags:
        - Search Operations
      parameters:
        - name: citation
          in: path
          required: true
          description: Citation key
          schema:
            type: string
      responses:
        '200':
          description: Nodes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  # Metadata Collections
  /tags:
    get:
      summary: List all tags
      description: Get all unique tags with usage counts
      tags:
        - Metadata Collections
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'

  /aliases:
    get:
      summary: List all aliases
      description: Get all unique aliases with usage counts
      tags:
        - Metadata Collections
      responses:
        '200':
          description: Aliases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasesListResponse'

  /refs:
    get:
      summary: List all references
      description: Get all unique references with usage counts
      tags:
        - Metadata Collections
      responses:
        '200':
          description: References retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefsListResponse'

  /citations:
    get:
      summary: List all citations
      description: Get all unique citations with usage counts
      tags:
        - Metadata Collections
      responses:
        '200':
          description: Citations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CitationsResponse'

  /stats:
    get:
      summary: Get database statistics
      description: Get comprehensive statistics about the org-roam database
      tags:
        - Metadata Collections
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'

  /config:
    get:
      summary: Get server configuration
      description: Get current server configuration settings
      tags:
        - Configuration
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'

  /ui:
    get:
      summary: Get org-roam-ui status
      description: Get org-roam-ui server status and configuration
      tags:
        - Visual Interface
      responses:
        '200':
          description: UI status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIStatusResponse'

  # Database Management
  /sync:
    post:
      summary: Sync database
      description: Synchronize the org-roam database with file system changes
      tags:
        - Database Management
      responses:
        '200':
          description: Database synchronized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'

components:
  schemas:
    # Base Response Types
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Operation completed successfully
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01 12:00:00"

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Operation failed
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01 12:00:00"

    # Health Check Response
    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            version:
              type: string
              example: "2.0.0"
            server_port:
              type: integer
              example: 8080
            ui_port:
              type: integer
              example: 35901
            ui_enabled:
              type: boolean
              example: true
            org_roam_directory:
              type: string
              example: "/Users/user/org-roam/"
            endpoints:
              type: array
              items:
                type: string
              example: ["/files", "/nodes", "/search", "/tags", "/stats", "/config", "/ui", "/sync"]

    # Node Schema
    Node:
      type: object
      properties:
        id:
          type: string
          description: Unique node identifier
          example: "20240101120000-example-note"
        title:
          type: string
          description: Node title
          example: "Example Note"
        file:
          type: string
          description: File path relative to org-roam directory
          example: "20240101120000-example-note.md"
        level:
          type: integer
          description: Node level (usually 0)
          example: 0
        tags:
          type: array
          items:
            type: string
          description: List of tags
          example: ["research", "important"]
        aliases:
          type: array
          items:
            type: string
          nullable: true
          description: List of aliases
          example: ["Example", "Sample Note"]
        ref_type:
          type: string
          nullable: true
          description: Reference type (only present for nodes retrieved via refs endpoints)
          example: "website"

    # Request Schemas
    CreateNodeRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Node title
          example: "My New Note"
        category:
          type: string
          description: Node category
          example: "#research #important"
        tags:
          type: array
          items:
            type: string
          description: List of tags
          example: ["tag1", "tag2"]
        aliases:
          type: array
          items:
            type: string
          description: List of aliases
          example: ["Alternative Name"]
        refs:
          type: array
          items:
            type: string
          description: List of references
          example: ["https://example.com"]
        content:
          type: string
          description: Node content
          example: "Initial content for the note."

    UpdateNodeRequest:
      type: object
      properties:
        title:
          type: string
          example: "Updated Title"
        category:
          type: string
          example: "#updated #category"
        tags:
          type: array
          items:
            type: string
          example: ["new-tag"]
        aliases:
          type: array
          items:
            type: string
          example: ["New Alias"]
        refs:
          type: array
          items:
            type: string
          example: ["https://updated.example.com"]
        content:
          type: string
          example: "Updated content."

    TagRequest:
      type: object
      required:
        - tag
      properties:
        tag:
          type: string
          description: Tag to add
          example: "new-tag"

    CategoryRequest:
      type: object
      required:
        - category
      properties:
        category:
          type: string
          description: Category to add
          example: "new-category"

    # Response Schemas
    FilesResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/Node'
            count:
              type: integer
              example: 150

    NodesResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            nodes:
              type: array
              items:
                $ref: '#/components/schemas/Node'
            count:
              type: integer
              example: 150

    NodeResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - $ref: '#/components/schemas/Node'

    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            query:
              type: string
              example: "research"
            nodes:
              type: array
              items:
                $ref: '#/components/schemas/Node'
            count:
              type: integer
              example: 25

    TagsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: object
                properties:
                  tag:
                    type: string
                    example: "research"
                  count:
                    type: integer
                    example: 15
                  node_ids:
                    type: array
                    items:
                      type: string
                    example: ["node1", "node2"]
            total_tags:
              type: integer
              example: 45

    StatsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            total_nodes:
              type: integer
              example: 150
            total_links:
              type: integer
              example: 320
            total_tags:
              type: integer
              example: 45
            total_aliases:
              type: integer
              example: 28
            total_refs:
              type: integer
              example: 67
            total_citations:
              type: integer
              example: 89
            file_types:
              type: object
              properties:
                md:
                  type: integer
                  example: 120
                org:
                  type: integer
                  example: 30
            avg_links_per_node:
              type: number
              example: 2.13

    ConfigResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            config_file:
              type: string
              example: "/Users/user/.config/md-roam-server/config.yml"
            server:
              type: object
              properties:
                port:
                  type: integer
                  example: 8080
                ui_port:
                  type: integer
                  example: 35901
                ui_enabled:
                  type: boolean
                  example: true
            org_roam:
              type: object
              properties:
                directory:
                  type: string
                  example: "/Users/user/org-roam/"
                db_location:
                  type: string
                  example: "/Users/user/org-roam/org-roam.db"
                db_exists:
                  type: boolean
                  example: true
            config_source:
              type: object
              description: Raw configuration from YAML file

    UIStatusResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            ui_enabled:
              type: boolean
              example: true
            ui_port:
              type: integer
              example: 35901
            ui_url:
              type: string
              example: "http://localhost:35901"
            ui_running:
              type: boolean
              example: true
            configuration:
              type: object
              properties:
                sync_theme:
                  type: boolean
                  example: true
                follow:
                  type: boolean
                  example: true
                update_on_save:
                  type: boolean
                  example: true
                open_on_start:
                  type: boolean
                  example: false

    SyncResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            initial_count:
              type: integer
              example: 149
            final_count:
              type: integer
              example: 150
            nodes_changed:
              type: integer
              example: 1
            directory:
              type: string
              example: "/Users/user/org-roam"

    # Additional response schemas for completeness
    RawFilesResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            directory:
              type: string
              example: "/Users/user/org-roam/"
            files:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: "20240101120000-example.md"
                  path:
                    type: string
                    example: "/Users/user/org-roam/20240101120000-example.md"
                  extension:
                    type: string
                    example: "md"
                  size:
                    type: integer
                    example: 1024
                  modified:
                    type: string
                    example: "2024-01-01 12:00:00"
                  created:
                    type: string
                    example: "2024-01-01 12:00:00"
            count:
              type: integer
              example: 150

    FileContentResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            path:
              type: string
              example: "20240101120000-example.md"
            full_path:
              type: string
              example: "/Users/user/org-roam/20240101120000-example.md"
            size:
              type: integer
              example: 1024
            modified:
              type: string
              example: "2024-01-01 12:00:00"
            content:
              type: string
              example: "# Example Note\n\nContent here..."

    NodeContentResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            node_id:
              type: string
              example: "20240101120000-example"
            title:
              type: string
              example: "Example Note"
            file_path:
              type: string
              example: "20240101120000-example.md"
            full_path:
              type: string
              example: "/Users/user/org-roam/20240101120000-example.md"
            level:
              type: integer
              example: 0
            size:
              type: integer
              example: 1024
            modified:
              type: string
              example: "2024-01-01 12:00:00"
            tags:
              type: array
              items:
                type: string
              example: ["research", "notes"]
            aliases:
              type: array
              items:
                type: string
              example: ["Example", "Sample"]
            content:
              type: string
              example: "# Example Note\n\nFull content here..."

    ParseResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            node_id:
              type: string
              example: "20240101120000-example"
            title:
              type: string
              example: "Example Note"
            file_path:
              type: string
              example: "20240101120000-example.md"
            full_path:
              type: string
              example: "/Users/user/org-roam/20240101120000-example.md"
            file_type:
              type: string
              example: "md"
            level:
              type: integer
              example: 0
            size:
              type: integer
              example: 1024
            modified:
              type: string
              example: "2024-01-01 12:00:00"
            tags:
              type: array
              items:
                type: string
              example: ["research", "notes"]
            aliases:
              type: array
              items:
                type: string
              example: ["Example"]
            metadata:
              type: array
              items:
                type: object
              example: [{"id": "20240101120000-example"}, {"title": "Example Note"}]
            body:
              type: string
              example: "# Example Note\n\nBody content..."

    BacklinksResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            node_id:
              type: string
              example: "target-node-id"
            backlinks:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "source-node-id"
                  title:
                    type: string
                    example: "Source Node"
                  file:
                    type: string
                    example: "source-node.md"
                  level:
                    type: integer
                    example: 0
                  link_type:
                    type: string
                    example: "id"
            count:
              type: integer
              example: 3

    LinksResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            node_id:
              type: string
              example: "source-node-id"
            links:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "target-node-id"
                  title:
                    type: string
                    example: "Target Node"
                  file:
                    type: string
                    example: "target-node.md"
                  level:
                    type: integer
                    example: 0
                  link_type:
                    type: string
                    example: "id"
            count:
              type: integer
              example: 2

    AliasesResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            id:
              type: string
              example: "node-id"
            title:
              type: string
              example: "Node Title"
            aliases:
              type: array
              items:
                type: string
              example: ["Alias 1", "Alias 2"]
            count:
              type: integer
              example: 2

    AliasesListResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            aliases:
              type: array
              items:
                type: object
                properties:
                  alias:
                    type: string
                    example: "Research Paper"
                  count:
                    type: integer
                    example: 3
                  node_ids:
                    type: array
                    items:
                      type: string
                    example: ["node1", "node2", "node3"]
            total_aliases:
              type: integer
              example: 28

    RefsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            id:
              type: string
              example: "node-id"
            title:
              type: string
              example: "Node Title"
            refs:
              type: array
              items:
                type: object
                properties:
                  ref:
                    type: string
                    example: "https://example.com"
                  type:
                    type: string
                    example: "website"
              example: 
                - ref: "https://example.com"
                  type: "website"
                - ref: "https://github.com/user/repo"
                  type: "repository"
            count:
              type: integer
              example: 2

    RefsListResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            refs:
              type: array
              items:
                type: object
                properties:
                  ref:
                    type: string
                    example: "https://example.com"
                  type:
                    type: string
                    example: "website"
                  count:
                    type: integer
                    example: 5
                  node_ids:
                    type: array
                    items:
                      type: string
                    example: ["node1", "node2"]
            total_refs:
              type: integer
              example: 67

    CitationsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            citations:
              type: array
              items:
                type: object
                properties:
                  citation:
                    type: string
                    example: "smith2023"
                  count:
                    type: integer
                    example: 3
                  node_ids:
                    type: array
                    items:
                      type: string
                    example: ["node1", "node2", "node3"]
            total_citations:
              type: integer
              example: 89

    TagResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            node_id:
              type: string
              example: "node-id"
            title:
              type: string
              example: "Node Title"
            tag_added:
              type: string
              example: "new-tag"
            tag_removed:
              type: string
              example: "old-tag"
            current_tags:
              type: array
              items:
                type: string
              example: ["existing-tag", "new-tag"]

    CategoryResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            node_id:
              type: string
              example: "node-id"
            title:
              type: string
              example: "Node Title"
            category_added:
              type: string
              example: "new-category"
            category_removed:
              type: string
              example: "old-category"
            current_categories:
              type: array
              items:
                type: string
              example: ["existing-category", "new-category"]
            message:
              type: string
              example: "Category management not implemented - use PUT /nodes/:id instead"

    DeleteResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            id:
              type: string
              example: "node-id"
            title:
              type: string
              example: "Deleted Node"
            file:
              type: string
              example: "deleted-node.md"

tags:
  - name: Health Check
    description: Server health check and status endpoints
  - name: File Operations
    description: Operations for managing org-roam files
  - name: Node Operations
    description: CRUD operations for org-roam nodes
  - name: Node Relationships
    description: Operations for exploring node relationships
  - name: Tag Management
    description: Operations for managing node tags
  - name: Category Management
    description: Operations for managing node categories
  - name: Search Operations
    description: Operations for searching and filtering nodes
  - name: Metadata Collections
    description: Operations for retrieving metadata collections
  - name: Configuration
    description: Server configuration management
  - name: Visual Interface
    description: org-roam-ui integration endpoints
  - name: Database Management
    description: Database synchronization operations