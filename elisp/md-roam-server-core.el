;;; md-roam-server-core.el --- Core functionality and configuration for md-roam-server

;;; Commentary:
;; Core variables, utilities, and configuration management for md-roam-server.

;;; Code:

(require 'json)
(require 'cl-lib)
(require 'org-roam)
(require 'org-id)
(require 'md-roam)
(require 'org-roam-ui)
(require 'yaml)

;;; Variables

(defvar md-roam-server-port 8080
  "Port for the md-roam HTTP server.")

(defvar md-roam-server-ui-port 35901
  "Port for the org-roam-ui server.")

(defvar md-roam-server-ui-enabled t
  "Whether to enable org-roam-ui integration.")

(defvar md-roam-server-process nil
  "Process object for the running server.")

(defvar md-roam-server-request-buffer ""
  "Buffer to accumulate request data.")

;;; Configuration Management

(defvar md-roam-server-config-file 
  (expand-file-name "~/.config/md-roam-server/config.yml")
  "Path to the md-roam-server configuration file.")

(defvar md-roam-server-config-defaults
  '((server
     (port . 8080)
     (ui-port . 35901)
     (ui-enabled . t))
    (org-roam
     (directory . "~/org-roam")
     (db-location . nil)))
  "Default configuration for md-roam-server.")

(defun md-roam-server--ensure-config-directory ()
  "Ensure the configuration directory exists."
  (let ((config-dir (file-name-directory md-roam-server-config-file)))
    (unless (file-exists-p config-dir)
      (make-directory config-dir t))))

(defun md-roam-server--create-default-config ()
  "Create a default configuration file."
  (md-roam-server--ensure-config-directory)
  (with-temp-file md-roam-server-config-file
    (insert "# md-roam-server configuration file\n")
    (insert "# This file is automatically generated. Edit to customize settings.\n\n")
    (insert "server:\n")
    (insert "  port: 8080                    # REST API port\n")
    (insert "  ui-port: 35901                # org-roam-ui web interface port\n")
    (insert "  ui-enabled: true              # Enable org-roam-ui integration\n\n")
    (insert "org-roam:\n")
    (insert "  directory: ~/org-roam         # Path to org-roam notes directory\n")
    (insert "  # db-location: nil            # Custom database location (optional)\n")))

(defun md-roam-server--load-config ()
  "Load configuration from file, creating default if it doesn't exist."
  (unless (file-exists-p md-roam-server-config-file)
    (md-roam-server--create-default-config)
    (message "Created default configuration file: %s" md-roam-server-config-file))
  
  (condition-case err
      (let ((config-content (with-temp-buffer
                              (insert-file-contents md-roam-server-config-file)
                              (yaml-parse-string (buffer-string)))))
        config-content)
    (error
     (message "Error loading config file: %s. Using defaults." (error-message-string err))
     md-roam-server-config-defaults)))

(defun md-roam-server--get-config-value (path &optional config)
  "Get configuration value at PATH from CONFIG (or loaded config)."
  (let ((config (or config (md-roam-server--load-config))))
    (cl-reduce (lambda (obj key)
                 (when (listp obj)
                   (cdr (assoc key obj))))
               path
               :initial-value config)))

(defun md-roam-server--apply-config ()
  "Apply configuration values to server variables."
  (let ((config (md-roam-server--load-config)))
    ;; Server configuration
    (when-let ((port (md-roam-server--get-config-value '(server port) config)))
      (setq md-roam-server-port port))
    (when-let ((ui-port (md-roam-server--get-config-value '(server ui-port) config)))
      (setq md-roam-server-ui-port ui-port))
    (when-let ((ui-enabled (md-roam-server--get-config-value '(server ui-enabled) config)))
      (setq md-roam-server-ui-enabled ui-enabled))
    
    ;; org-roam configuration
    (when-let ((directory (md-roam-server--get-config-value '(org-roam directory) config)))
      (setq org-roam-directory (expand-file-name directory)))
    (when-let ((db-location (md-roam-server--get-config-value '(org-roam db-location) config)))
      (when db-location
        (setq org-roam-db-location (expand-file-name db-location))))
    
    (message "Configuration loaded: API port=%d, UI port=%d, org-roam directory=%s" 
             md-roam-server-port 
             md-roam-server-ui-port 
             org-roam-directory)))

;;; Utility Functions

(defun md-roam-server--current-timestamp ()
  "Return current timestamp in standard format."
  (format-time-string "%Y-%m-%d %H:%M:%S"))

(defun md-roam-server--safe-directory ()
  "Return org-roam directory or a safe default."
  (condition-case nil
      (expand-file-name org-roam-directory)
    (error (expand-file-name "~/org-roam"))))

(defun md-roam-server--create-success-response (message &optional data)
  "Create a standard success response with MESSAGE and optional DATA."
  (let ((response `((status . "success")
                    (message . ,message)
                    (timestamp . ,(md-roam-server--current-timestamp)))))
    (if data
        (append response data)
      response)))

(defun md-roam-server--create-error-response (message &optional data)
  "Create a standard error response with MESSAGE and optional DATA."
  (let ((response `((status . "error")
                    (message . ,message)
                    (timestamp . ,(md-roam-server--current-timestamp)))))
    (if data
        (append response data)
      response)))

(defun md-roam-server-init-org-roam ()
  "Initialize org-roam database and ensure it's ready."
  (condition-case err
      (progn
        (unless (file-exists-p org-roam-directory)
          (make-directory org-roam-directory t))
        (org-roam-db-sync)
        (message "org-roam initialized: %s" org-roam-directory))
    (error
     (message "Error initializing org-roam: %s" (error-message-string err)))))

(provide 'md-roam-server-core)
;;; md-roam-server-core.el ends here