;;; md-roam-server-core.el --- Core functionality and configuration for md-roam-server

;;; Commentary:
;; Core variables, utilities, and configuration management for md-roam-server.

;;; Code:

(require 'json)
(require 'cl-lib)
(require 'org-roam)
(require 'org-id)
(require 'md-roam)
(require 'org-roam-ui)
(require 'yaml)

;;; Variables

;;; Japanese and UTF-8 Support Configuration

(defvar md-roam-server-japanese-enabled t
  "Whether to enable enhanced Japanese language support.")

(defvar md-roam-server-utf-8-encoding t
  "Whether to use UTF-8 encoding for all operations.")

;;; Server Configuration

(defvar md-roam-server-port 8080
  "Port for the md-roam HTTP server.")

(defvar md-roam-server-ui-port 35901
  "Port for the org-roam-ui server.")

(defvar md-roam-server-ui-enabled t
  "Whether to enable org-roam-ui integration.")

(defvar md-roam-server-process nil
  "Process object for the running server.")

(defvar md-roam-server-request-buffer ""
  "Buffer to accumulate request data.")

(defvar md-roam-server-initialized nil
  "Whether org-roam has been initialized for the server.")

(defvar md-roam-server-sync-timer nil
  "Timer for background database synchronization.")

;;; Configuration Management

(defvar md-roam-server-config-file 
  (or (getenv "MD_ROAM_CONFIG_FILE")
      (expand-file-name "~/.config/md-roam-server/config.yml"))
  "Path to the md-roam-server configuration file.
Can be overridden by setting the MD_ROAM_CONFIG_FILE environment variable.")

(defvar md-roam-server-config-defaults
  '((server
     (port . 8080)
     (ui-port . 35901)
     (ui-enabled . t))
    (org-roam
     (directory . "~/org-roam")
     (db-location . nil))
    (japanese
     (enabled . t)
     (utf-8-encoding . t)))
  "Default configuration for md-roam-server.")

(defun md-roam-server--ensure-config-directory ()
  "Ensure the configuration directory exists."
  (let ((config-dir (file-name-directory md-roam-server-config-file)))
    (unless (file-exists-p config-dir)
      (make-directory config-dir t))))

(defun md-roam-server--create-default-config ()
  "Create a default configuration file."
  (md-roam-server--ensure-config-directory)
  (with-temp-file md-roam-server-config-file
    (insert "# md-roam-server configuration file\n")
    (insert "# This file is automatically generated. Edit to customize settings.\n\n")
    (insert "server:\n")
    (insert "  port: 8080                    # REST API port\n")
    (insert "  ui-port: 35901                # org-roam-ui web interface port\n")
    (insert "  ui-enabled: true              # Enable org-roam-ui integration\n\n")
    (insert "org-roam:\n")
    (insert "  directory: ~/org-roam         # Path to org-roam notes directory\n")
    (insert "  # db-location: nil            # Custom database location (optional)\n\n")
    (insert "japanese:\n")
    (insert "  enabled: true                 # Enable enhanced Japanese language support\n")
    (insert "  utf-8-encoding: true          # Use UTF-8 encoding for all operations\n")))

(defun md-roam-server--load-config ()
  "Load configuration from file, creating default if it doesn't exist."
  (unless (file-exists-p md-roam-server-config-file)
    (md-roam-server--create-default-config)
    (message "Created default configuration file: %s" md-roam-server-config-file))
  
  (condition-case err
      (let ((config-content (with-temp-buffer
                              (insert-file-contents md-roam-server-config-file)
                              (yaml-parse-string (buffer-string)))))
        config-content)
    (error
     (message "Error loading config file: %s. Using defaults." (error-message-string err))
     md-roam-server-config-defaults)))

(defun md-roam-server--get-config-value (path &optional config)
  "Get configuration value at PATH from CONFIG (or loaded config)."
  (let ((config (or config (md-roam-server--load-config))))
    (cl-reduce (lambda (obj key)
                 (cond
                  ((hash-table-p obj)
                   (gethash key obj))
                  ((listp obj)
                   (cdr (assoc key obj)))
                  (t nil)))
               path
               :initial-value config)))

(defun md-roam-server--apply-config ()
  "Apply configuration values to server variables."
  (let ((config (md-roam-server--load-config)))
    ;; Server configuration
    (when-let ((port (md-roam-server--get-config-value '(server port) config)))
      (setq md-roam-server-port port))
    (when-let ((ui-port (md-roam-server--get-config-value '(server ui-port) config)))
      (setq md-roam-server-ui-port ui-port))
    (when-let ((ui-enabled (md-roam-server--get-config-value '(server ui-enabled) config)))
      (setq md-roam-server-ui-enabled ui-enabled))
    
    ;; org-roam configuration
    (when-let ((directory (md-roam-server--get-config-value '(org-roam directory) config)))
      (setq org-roam-directory (expand-file-name directory)))
    (when-let ((db-location (md-roam-server--get-config-value '(org-roam db-location) config)))
      (when db-location
        (setq org-roam-db-location (expand-file-name db-location))))
    
    ;; Japanese and UTF-8 configuration
    (when-let ((japanese-enabled (md-roam-server--get-config-value '(japanese enabled) config)))
      (setq md-roam-server-japanese-enabled japanese-enabled))
    (when-let ((utf-8-encoding (md-roam-server--get-config-value '(japanese utf-8-encoding) config)))
      (setq md-roam-server-utf-8-encoding utf-8-encoding))
    
    (message "Configuration loaded: API port=%d, UI port=%d, org-roam directory=%s, Japanese=%s, UTF-8=%s" 
             md-roam-server-port 
             md-roam-server-ui-port 
             org-roam-directory
             (if md-roam-server-japanese-enabled "enabled" "disabled")
             (if md-roam-server-utf-8-encoding "enabled" "disabled"))))

;;; Utility Functions

;;; Japanese and UTF-8 Support Functions

(defun md-roam-server--setup-japanese-support ()
  "Setup enhanced Japanese language support for the server."
  (when md-roam-server-japanese-enabled
    ;; Set default coding system to UTF-8
    (set-default-coding-systems 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8)
    (setq default-file-name-coding-system 'utf-8)
    (setq default-keyboard-coding-system 'utf-8)
    (setq default-terminal-coding-system 'utf-8)
    
    ;; Set locale environment
    (setenv "LANG" "ja_JP.UTF-8")
    (setenv "LC_ALL" "ja_JP.UTF-8")
    (setenv "LC_CTYPE" "ja_JP.UTF-8")
    
    ;; Configure org-mode for Japanese
    (setq org-export-coding-system 'utf-8)
    (setq org-html-coding-system 'utf-8)
    
    ;; Configure file encoding
    (setq file-name-coding-system 'utf-8)
    (setq buffer-file-coding-system 'utf-8)
    
    ;; Additional Japanese language optimizations
    (setq org-export-with-smart-quotes t)
    (setq org-export-with-sub-superscripts t)
    (setq org-export-with-entities t)
    
    ;; Optimize for Japanese text processing
    (setq org-export-preserve-breaks t)
    (setq org-export-with-toc t)
    
    ;; Set Japanese locale for better text processing
    (setq system-time-locale "ja_JP.UTF-8")
    
    (message "Japanese language support enabled with UTF-8 encoding")))

(defun md-roam-server--ensure-utf-8-encoding (content)
  "Ensure CONTENT is properly encoded in UTF-8."
  (when (and md-roam-server-utf-8-encoding content)
    (if (stringp content)
        (encode-coding-string content 'utf-8)
      content)))

(defun md-roam-server--decode-utf-8-content (content)
  "Decode CONTENT from UTF-8 if needed."
  (when (and md-roam-server-utf-8-encoding content)
    (if (stringp content)
        (decode-coding-string content 'utf-8)
      content)))

(defun md-roam-server--sanitize-japanese-content (content)
  "Sanitize Japanese content while preserving UTF-8 encoding."
  (when (and md-roam-server-japanese-enabled content (stringp content))
    (let ((sanitized content))
      ;; Preserve Japanese characters while sanitizing HTML
      (setq sanitized (md-roam-server--sanitize-html sanitized))
      ;; Ensure proper UTF-8 encoding
      (setq sanitized (md-roam-server--ensure-utf-8-encoding sanitized))
      sanitized)))

(defun md-roam-server--current-timestamp ()
  "Return current timestamp in standard format."
  (format-time-string "%Y-%m-%d %H:%M:%S"))

(defun md-roam-server--safe-directory ()
  "Return org-roam directory or a safe default."
  (condition-case nil
      (expand-file-name org-roam-directory)
    (error (expand-file-name "~/org-roam"))))

(defun md-roam-server--sanitize-html (input)
  "Remove potentially dangerous HTML/script tags from INPUT string.
This provides basic XSS protection by removing script tags and other dangerous elements."
  (when (stringp input)
    (let ((sanitized input))
      ;; Remove script tags and their content
      (setq sanitized (replace-regexp-in-string "<script[^>]*>.*?</script>" "" sanitized t t))
      ;; Remove potentially dangerous attributes like onerror, onclick, etc
      (setq sanitized (replace-regexp-in-string " on[a-zA-Z]*=[\"'][^\"']*[\"']" "" sanitized t))
      ;; Remove other dangerous tags
      (setq sanitized (replace-regexp-in-string "<\\(iframe\\|object\\|embed\\|form\\)[^>]*>" "" sanitized t))
      sanitized)))

(defun md-roam-server--create-success-response (message &optional data)
  "Create a standard success response with MESSAGE and optional DATA."
  (let ((response `((status . "success")
                    (message . ,message)
                    (timestamp . ,(md-roam-server--current-timestamp)))))
    (if data
        (append response data)
      response)))

(defun md-roam-server--create-error-response (message &optional data)
  "Create a standard error response with MESSAGE and optional DATA."
  (let ((response `((status . "error")
                    (message . ,message)
                    (timestamp . ,(md-roam-server--current-timestamp)))))
    (if data
        (append response data)
      response)))

(defun md-roam-server--generate-node-id ()
  "Generate a safe UUID for node ID without relying on org-id-new."
  (condition-case nil
      (org-id-new)
    (error
     ;; Fallback to simple UUID generation if org-id-new fails
     (let ((chars "ABCDEF0123456789"))
       (format "%s%s%s%s-%s%s-%s%s-%s%s-%s%s%s%s%s%s"
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16))
               (aref chars (random 16)) (aref chars (random 16)))))))

(defun md-roam-server-init-org-roam ()
  "Initialize org-roam database and ensure it's ready."
  (condition-case err
      (when (not md-roam-server-initialized)
        ;; Setup Japanese language support first
        (md-roam-server--setup-japanese-support)
        
        ;; Setup md-roam for Markdown file support
        (setq md-roam-file-extension "md")
        (setq org-roam-file-extensions '("org" "md"))
        (setq org-roam-title-sources '((title headline) (alias alias)))
        
        ;; Configure md-roam to use YAML front matter
        (setq md-roam-use-org-extract-ref-links t)
        
        ;; Initialize md-roam only if not already enabled
        (unless (bound-and-true-p md-roam-mode)
          (md-roam-mode 1))
        
        (message "md-roam mode enabled with file extensions: %s" org-roam-file-extensions)
        
        (unless (file-exists-p org-roam-directory)
          (make-directory org-roam-directory t))
          
        ;; Ensure database is in the same directory as the notes
        (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
        
        ;; Start background sync timer for performance
        (md-roam-server--start-background-sync)
        
        ;; Perform initial sync with timeout
        (condition-case sync-err
            (let ((org-roam-db-sync-timeout 10))
              (org-roam-db-sync))
          (error
           (message "Initial sync error: %s" (error-message-string sync-err))))
        
        (let ((node-count (caar (org-roam-db-query "SELECT COUNT(*) FROM nodes"))))
          (message "org-roam reinitialized: %s (%d nodes)" org-roam-directory node-count))
          
        (setq md-roam-server-initialized t))
    (error
     (message "Error initializing org-roam: %s" (error-message-string err)))))

(defun md-roam-server--start-background-sync ()
  "Start background database synchronization timer."
  (when md-roam-server-sync-timer
    (cancel-timer md-roam-server-sync-timer))
  (setq md-roam-server-sync-timer
        (run-with-timer 1 nil 'md-roam-server--background-sync)))

(defun md-roam-server--background-sync ()
  "Perform background database synchronization."
  (condition-case err
      (progn
        (message "Starting background org-roam database sync...")
        ;; Use a shorter timeout for background sync
        (let ((org-roam-db-sync-timeout 30))
          (org-roam-db-sync))
        (message "Background org-roam database sync completed")
        ;; Schedule next sync in 5 seconds for better responsiveness
        (setq md-roam-server-sync-timer
              (run-with-timer 5 nil 'md-roam-server--background-sync)))
    (error
     (message "Background sync error: %s" (error-message-string err))
     ;; Retry in 30 seconds on error
     (setq md-roam-server-sync-timer
           (run-with-timer 30 nil 'md-roam-server--background-sync)))))

(provide 'md-roam-server-core)
;;; md-roam-server-core.el ends here